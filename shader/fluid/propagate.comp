// layout (local_size_x = 1, local_size_y = 1) in;

layout(set = 0, binding = 0) uniform FluidUniform {
    // 表示D2Q9离散速度模型速度空间的速度配置
    vec2 e[9];
    // lattice 在正规化坐标空间的大小
    vec2 lattice_size;
    vec2 lattice_num;
    float weight[9];
    // 0： f_tex10， 1: f_tex11
    int swap;
};

struct LatticeCell {
    float cell[9];
};

struct FluidCell {
    vec3 color;
};
layout (set = 0, binding=1) buffer CollideBuffer  { LatticeCell collideCells[];  };
layout (set = 0, binding=2) buffer StreamBuffer   { LatticeCell streamCells[];   };
layout (set = 0, binding=3) buffer FluidBuffer    { FluidCell fluidCells[];    };
// 中心点的参数：r = source f_i 0, g = dst f_i 0

//弛豫时间
const float dRevTau=1.0/0.75;   

// 回弹方向对应的传播索引
const int bounceBackDirection[9] = int[](0, 3, 4, 1, 2, 7, 8, 5, 6);

// 普通回弹
// direction: 方向索引
void setNormalBounceBack(ivec2 uv, int direction) {
    int cellIndex = uv.x * int(lattice_num.x) + uv.y;
    streamCells[cellIndex].cell[direction] = collideCells[cellIndex].cell[bounceBackDirection[direction]];
}

// 迁移
// 隐式实现：将上一个点迁移到当前点
void propagate(ivec2 uv, int direction) {
    int destIndex = uv.x * int(lattice_num.x) + uv.y;
    int srcIndex = (uv.x - int(e[direction].x)) * int(lattice_num.x) + (uv.y - int(e[direction].y));
    streamCells[destIndex].cell[direction] = collideCells[srcIndex].cell[direction];
}

void main() {
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

    // 四周边界 
    if (uv.x == 0 || uv.x == int(lattice_num.x - 1.0) || uv.y == 0 || uv.y == int(lattice_num.y - 1.0)) {
        // imageLoad 坐标是左上角为（0， 0），右下角为（w, h)
        // 回弹方向的变量，应该到 src 上当前位置的 lattice 上的反方向的值
        // 左边界
        if (uv.x == 0) {
            setNormalBounceBack(uv, 1);
            setNormalBounceBack(uv, 5);
            setNormalBounceBack(uv, 8);
            propagate(uv, 0);
            propagate(uv, 2);
            propagate(uv, 3);
            propagate(uv, 4);
            propagate(uv, 6);
            propagate(uv, 7);

        } else if (uv.x >= int(lattice_num.x - 2.0)) {
            // 右边界
            setNormalBounceBack(uv, 3);
            setNormalBounceBack(uv, 6);
            setNormalBounceBack(uv, 7);
            propagate(uv, 0);
            propagate(uv, 2);
            propagate(uv, 1);
            propagate(uv, 4);
            propagate(uv, 5);
            propagate(uv, 8);
        } else if (uv.y <= 1) {
            // 顶边界
            setNormalBounceBack(uv, 4);
            setNormalBounceBack(uv, 8);
            setNormalBounceBack(uv, 7);
            propagate(uv, 0);
            propagate(uv, 2);
            propagate(uv, 1);
            propagate(uv, 3);
            propagate(uv, 5);
            propagate(uv, 6);
        } else {
            // 顶边界
            setNormalBounceBack(uv, 2);
            setNormalBounceBack(uv, 5);
            setNormalBounceBack(uv, 6);
            propagate(uv, 0);
            propagate(uv, 3);
            propagate(uv, 1);
            propagate(uv, 4);
            propagate(uv, 7);
            propagate(uv, 8);
        }
    } 
    else {
        for (int i = 0; i < 9; i++) {
            propagate(uv, i);
        }       
    }

}